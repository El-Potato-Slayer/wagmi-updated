import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useEffect, useState } from 'react'
import { switchNetwork, waitForTransaction } from '@wagmi/core'
import { useWaitForTransaction, useContractWrite, useAccount, useBalance, useNetwork, usePrepareContractWrite } from 'wagmi'
import { Web3Button } from '@web3modal/react'
import abi from '../abi.json';
import { ethers } from 'ethers'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {

  // This code is done by coding fectum (Start)
  const { chain, chains } = useNetwork()
  const { address } = useAccount();
  const [selectedCoin, setSelectedCoin] = useState(1);
  const [icoBalance, setIcoBalance] = useState(0);
  const [selectedCoinBalance, setSelectedCoinBalance] = useState(0);
  const [allChain, setAllChain] = useState([]);
  const [selectedChain, setSelectedChain] = useState([]);

  const handleSwitchCoin = async (event) => {
    let val = await event.target.value;
    console.log(val);
    setSelectedCoin(val);
    try {
      switchNetwork({ chainId: Number(val), })
    } catch (error) {
      console.log("Switching network error: ", error)
    }
  };

  useEffect(() => {
    setAllChain(chains)
    console.log('chains', chains);
    setSelectedChain(chain)
  }, [chain, selectedChain, allChain, icoBalance, selectedCoinBalance])

  useEffect(() => {
    console.log('selectedChain', selectedChain);
  }, [selectedChain])

  // This code is done by coding fectum (end)

  const [inputs, setInputs] = useState({ amount: null, selected_currency: 'usdt' });

  /* Approve function set up */
  const { config: configApprove } = usePrepareContractWrite({
    address: selectedChain?.stable_coin_address,
    abi: selectedChain?.abi,
    chainId: selectedChain?.id,
    functionName: 'approve',
    args: [selectedChain?.ico_address, ethers.utils.parseUnits(
      inputs.amount || "0",
      selectedChain?.exponent
    ), {
      gasLimit: ethers.utils.hexlify(100000)
    }],
    onSettled(data, error) {
      if (data) {
        console.log('Settled approve data: ', data);
      } else {
        console.log('Settled approve error: ', error);
      }
    }
  })
  const { writeAsync: approve } = useContractWrite(configApprove)
  /* Buy set up */
  const { config: configBuy } = usePrepareContractWrite({
    address: selectedChain?.ico_address,
    abi: abi,
    chainId: selectedChain?.id,
    functionName: 'buyTokensWthStableCoin',
    args: [ethers.utils.parseUnits(
      inputs.amount || "0",
      selectedChain?.exponent
    ), {
      gasLimit: ethers.utils.hexlify(1000000)
    }],
    onSettled(data, error) {
      console.log('Settled buy', { data, error });
    }
  })
  const { writeAsync: buy } = useContractWrite(configBuy)


  const handleInputChange = (event) => {
    const { name, value } = event.target;

    const temp = { ...inputs }
    temp[name] = value;
    setInputs({ ...temp });

  }
  const purchaseTokens = async () => {

    try {
      const approvalReceipt = await approve();
      await waitForTransaction({
        hash: approvalReceipt.hash,
      })
      const finalReceipt = await buy();
      await waitForTransaction({
        hash: finalReceipt?.hash,
      })
    } catch (error) {
      console.log(error);
    }
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <Web3Button />
        <h2>Buy LGCT with one of the following currencies:</h2>
        <p>ICO: {selectedChain?.ico_address} :: {icoBalance} LGCT</p>
        <p>Stable Coin: {selectedChain?.stable_coin_address} :: {selectedCoinBalance} {selectedChain?.stable_coin_name}</p>
        <p>Chain Id: {selectedChain?.name}-{selectedChain?.id}</p>
        <div className={`${styles['inputs-wrapper']}`}>
          <input
            placeholder='Amount'
            name='amount'
            value={inputs.amount || ''}
            onChange={handleInputChange}
          />
          <select
            name="selected_currency"
            value={selectedCoin}
            onChange={handleSwitchCoin}
          >
            {/* {selectedChain?.id ?
              <>
                {selectedChain?.id == 5 ? <option selected>usdc</option> : null}
                {selectedChain?.id == 11155111 ? <option selected>usdt</option> : null}
                {selectedChain?.id == 97 ? <option selected>busd</option> : null}
              </>
              :
              <option></option>
            } */}
            {allChain?.map((option, index) => <option key={index} value={option.id}>{option.stable_coin_name}</option>)}

          </select>
        </div>
        <button onClick={purchaseTokens}>Purchase LGCT</button>
      </main>
    </>
  )
}
